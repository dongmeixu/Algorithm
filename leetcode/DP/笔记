Dynamic Programming
定义：
    本质：递归，原问题（N）->子问题（N-1）->原问题（N）
    最优子结构（1）子问题最优决策可导出原问题最有决策（2）无后效性,利用递归式解决后效性
    重叠子问题（1）去冗余（2）空间换时间
DP：有向无环图，所有状态构成一个有向无环图


--------------------------------------------------------
问题共性：
    套路：最优，最大，最小，最长，计数
    离散问题：容易设计状态
    最优子结构：N-1可以推导出N


--------------------------------------------------------
基本步骤：
    四个步骤
        1. 设计暴力搜索算法，找到冗余
        2. 设计并存储状态（一维，二维，三维数组，甚至用map）
        3. 递归式（状态转移方程）
        4. 自底向上计算最优解（编程方式）
    计划搜索：就是自顶向下，比较清晰，代码量较大，边界条件比较多（递归）
    自底向上：编码简单（for循环）


--------------------------------------------------------
小兵向前冲
    时间复杂度？
    空间复杂度？
    组合数递推公式C(n, m)？
     * 从n个东西里取m个：
     * C(n, m) = C(n - 1, m - 1) + C(n - 1, m)
     * C(n-1, m-1)表示第n个东西被选了
     * C(n-1, m)表示第n个东西没有被选
    如果某些格子禁止小兵进入？
    小兵一次某方向上可以走一步后者两步？



--------------------------------------------------------
0——1背包问题，能用dp解决的话，其实是有限制条件的：w不能很大，n很大，且w整数
    空间复杂度
    时间复杂度
    滚动数组
    如果W很大怎么办？没办法
    如果相关值是实数怎么办？没办法


--------------------------------------------------------

