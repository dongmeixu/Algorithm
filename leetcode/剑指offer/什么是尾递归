百度百科：
1.什么是尾递归？Tail Recursion
如果一个函数中所有递归形式的调用都出现在函数的末尾，我们称这个递归函数是尾递归的。
当递归调用是整个函数体中最后执行的语句且它的返回值不属于表达式的一部分时，这个递归调用就是尾递归。
尾递归函数的特点是在回归过程中不用做任何操作，这个特性很重要，因为大多数现代的编译器会利用这种特点自动生成优化的代码。

2.传统递归------>低效 会造成栈溢出

3.尾递归的判断标准是函数运行最后一步是否调用自身，而不是是否在函数的最后一行调用自身

4.尾递归的好处：因为进入最后一步后不再需要参考外层函数（caller）的信息，因此没必要保存外层函数的stack，
递归需要的stack只有目前这层函数的，因此避免了栈溢出风险。


比如：计算n的阶乘------->并不是尾递归
def Fibonacci(n):
    if n < 0:
        retun 0
    elif n <= 1:
        return 1
    else:
        return n * Fibonacci(n - 1)

比如：计算n的阶乘------->尾递归
def Fibonacci(n, a):
    if n < 0:
        retun 0
    elif n == 0:
        return 1
    elif n == 1
        retun a
    else:
        return Fibonacci(n - 1, n * a)

5. 编译器是怎样优化尾递归的？
我们知道递归调用是通过栈来实现的，每调用一次函数，系统都将函数当前的变量、返回地址等信息保存为一个栈帧压入到栈中，
那么一旦要处理的运算很大或者数据很多，有可能会导致很多函数调用或者很大的栈帧，这样不断的压栈，很容易导致栈的溢出。

我们回过头看一下尾递归的特性，函数在递归调用之前已经把所有的计算任务已经完毕了，
他只要把得到的结果全交给子函数就可以了，无需保存什么，子函数其实可以不需要再去创建一个栈帧，直接把就着当前栈帧，把原先的数据覆盖即可。
相对的，如果是普通的递归，函数在递归调用之前并没有完成全部计算，还需要调用递归函数完成后才能完成运算任务，比如return n * Fibonaccit(n - 1);
这句话，这个Fibonacci(n)在算完Fibonacci（n-1）之后才能得到n * Fibonacci(n - 1)的运算结果然后才能返回。

综上所述，编译器对尾递归的优化实际上就是当他发现你丫在做尾递归的时候，就不会去不断创建新的栈帧，而是就着当前的栈帧不断的去覆盖，
一来防止栈溢出，二来节省了调用函数时创建栈帧的开销，
用《算法精解》里面的原话就是：“When a compiler detects a call that is tail recursive, it overwrites the current activation record instead of pushing a new one onto the stack.”


6.参考资料
https://site.douban.com/196781/widget/notes/12161495/note/262014367/
http://www.cnblogs.com/Alexander-Lee/archive/2010/09/16/1827587.html